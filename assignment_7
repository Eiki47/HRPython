q1
# find_min function definition goes here
def find_min():
    return min(first, second)
first = int(input("Enter first number: "))
second = int(input("Enter second number: "))

    
# Call the function here
print("Minimum: ", find_min())

q2
# Your function definition goes here
def count_case(inp):
    upper=0
    lower=0
    for letter in inp:
        if letter.isupper():
            upper+=1
        if letter.islower():
            lower+=1
    return upper, lower
user_input = input("Enter a string: ")

# Call the function here
cc = count_case(user_input)
print("Upper case count: ", count_case(user_input)[0])
print("Lower case count: ", count_case(user_input)[1])

q3
# The function definition goes here
def trueNumber(nr):
    if nr > 1 and nr < 555:
        return True
num = int(input("Enter a number: "))

# You call the function her
if trueNumber(num):
    print (num, "is in range.")
else:
    print (num, "is outside the range!")

q4
# is_prime function definition goes here
def is_prime(n):
    for i in range(2,int(n**0.5)+1):
        if n % i == 0:
            return False
    return True
num = int(input("Input an integer greater than 1: "))

# Call the function here and print out the appropriate message
if (is_prime(num)):
    print(num, "is a prime")
else:
    print(num,"is not a prime")

q5

# palindrome function definition goes here
def palindrome(p):
    pa = p.replace(" ", "")
    pb = pa.replace("'", "")
    pc = pb.replace(".", "")
    pd = pc.replace(",", "")
    pe = pd.replace("!", "")
    pf = pe.lower()
    if pf == ''.join(reversed(pf)):
        return True
    return False
in_str = input("Enter a string: ")

# call the function and print out the appropriate message
if palindrome(in_str):
    print ('"'+in_str+'" is a palindrome.')
else:
    print ('"'+in_str+'" is not a palindrome.')
   
q6
# Your function definition goes here
def fibo(n):
    new = 1
    old = 1
    i = 1
    while (i < n):
        new, old, i = new + old, new, i + 1
    return new
n = int(input("Input the length of Fibonacci sequence (n>=1): "))
# Call your function here
for i in range(n):
    print (fibo(i), end=" ")
